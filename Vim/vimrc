if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
" Colors
Plug 'croaker/mustang-vim'
Plug 'tomasr/molokai'
Plug 'nanotech/jellybeans.vim'

" Syntax
Plug 'tpope/vim-git', { 'for': 'git' }
Plug 'plasticboy/vim-markdown', { 'for': 'markdown' }
Plug 'elzr/vim-json', { 'for': 'json' }

" auto close quotes, parenthesis, etc.
Plug 'Raimondi/delimitMate'

" Make tab handle all completions
Plug 'ervandew/supertab'

Plug 'davidhalter/jedi-vim', { 'for': 'python' }

" git integration
Plug 'tpope/vim-fugitive'

" Edit surrounding quotes, parenthesis
Plug 'tpope/vim-surround'

" Proper '.' repats
Plug 'tpope/vim-repeat'

" Revision history for file in vim
Plug 'sjl/gundo.vim'
nnoremap <F5> :GundoToggle<CR>
nnoremap <leader>g :GundoToggle<CR>

" modify comments easily
Plug 'scrooloose/nerdcommenter'

" Code analysis (lint, etc.)
Plug 'scrooloose/syntastic', {'for': 'python'}
"let g:syntastic_python_checkers=['pylint', 'flake8']
"let g:syntastic_python_checkers=['flake8']
let g:syntastic_mode_map = {
            \ "mode": "active",
            \ "active_filetypes": [],
            \ "passive_filetypes": ["python"] }

" File/buffer search plugin, replaces Command-T
Plug 'ctrlpvim/ctrlp.vim'
nmap <silent> <leader>t :CtrlP<CR>
nmap <silent> <leader>b :CtrlPBuffer<CR>

" The Silver Searcher
if executable('ag')
    " Use ag over grep
    set grepprg=ag\ --nogroup\ --nocolor
    " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
    " ag is fast enough that CtrlP doesn't need to cache
    let g:ctrlp_use_caching = 0
endif

" fancy statusline
Plug 'bling/vim-airline'
Plug 'vim-airline/vim-airline-themes'
let g:airline_theme='jellybeans'
if has('gui_running')
    let g:airline_powerline_fonts = 1
endif

Plug 'majutsushi/tagbar'
if has('mac')
    let g:tagbar_ctags_bin='/usr/local/Cellar/ctags/5.8/bin/ctags'
elseif has('unix')
    let g:tagbar_ctags_bin='/usr/bin/ctags'
endif
" Have F8 toggle the tagbar
nmap <F8> :TagbarToggle<CR>

Plug 'nathanaelkane/vim-indent-guides'
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_guide_size = 1
" Have F9 toggle the indent guide.
nmap <F9> :IndentGuidesToggle<CR>

"UltiSnips
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

"Gist.vim, allows editing of github gists easily
Plug 'mattn/gist-vim'

"move around easily
Plug 'Lokaltog/vim-easymotion'

Plug 'godlygeek/tabular'

Plug 'vim-scripts/YankRing.vim'

Plug 'AndrewRadev/splitjoin.vim'

call plug#end()

" change mapleader from \ to ,
let mapleader=","

" Quickly edit/reload the vimrc file
" ev to edit, sv to source
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

set modelines=0     "prevent security exploits
set nohidden        "don't allow hidden buffers
set nowrap          "don't wrap lines
set tabstop=4       "a tab is four spaces
set shiftwidth=4    "number of spaces to use for autoindenting
set softtabstop=4
set expandtab       "expand tabs to spaces
set backspace=indent,eol,start "allow backspacking over everything in insert mode
set autoindent      "always set autoindent
set copyindent      "copy the previous indentation on autoindenting
set shiftround      "multiple of shiftwidth when indenting with '<' and '>'
set showmatch       "show matching parenthesis
set ignorecase      "ignore case when searching
set smartcase       "ignore case if search pattern is all lowercase,
                    "case sensitive otherwise
set smarttab        "insert tabs on the start of a line according to
                    "shiftwidth not tabstop
set hlsearch        "highlight search terms
set incsearch       "show search matches as you type
set guioptions-=T   " No toolbar
set shortmess+=I    " No welcome screen
set shortmess+=A    " No .swp warning
set encoding=utf-8
set scrolloff=3     " start scrolling before cursor hits end
set showmode
set showcmd
set cursorline
set ttyfast
set ruler "Show information on vim bottom
set laststatus=2
set undofile
set fillchars=vert:\│    " that's a vertical box-drawing character

set history=1000    "remember more commands and search history
set undolevels=1000 "use many levels of undo
set title           " change terminal's title
set visualbell      " don't beep
set noerrorbells    " don't beep
set noshowmode      " Hide teh default mode text (e.g. --INSERT -- )

set completeopt=menuone,longest,preview

set wildmenu                                    " Better file name completion
set wildmode=list:longest,full
set wildignore=*.bak,*.class
set wildignore+=.hg,.git,.svn                    " Version control
set wildignore+=*.aux,*.out,*.toc                " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.DS_Store                       " OSX bullshit
set wildignore+=migrations                       " Django migrations
set wildignore+=*.pyc                            " Python byte code
set wildignore+=*.orig                           " Merge resolution files

set list
set listchars=tab:>·,trail:·,extends:#,nbsp:·   "Let me see spaces and tabs
                                                "If want eol append ',eol:¬'
set mouse=a                                     "Allow mouse features
set pastetoggle=<F2>                            "No autoindent in paste mode
set gdefault                                    "Defaults to /g for switch

set foldmethod=indent
set foldlevel=99

"always show line numbers, but only in current window
set number
:au WinEnter * :setlocal number
:au WinLeave * :setlocal nonumber

" Automatically resize vertical splits.
:au WinEnter * :set winfixheight
:au WinEnter * :wincmd =

if &t_Co >= 256 || has("gui_running")
  "colorscheme Mustang
  "colorscheme molokai
  colorscheme jellybeans
endif

nnoremap ; :

map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

"nnoremap <leader><space> :noh<cr>
nnoremap <leader><space> :noh<ESC>

" change current file to be opened as 'sudo' and write the file
cmap w!! %!sudo tee > /dev/null %

" Use sane regex
nnoremap / /\v
vnoremap / /\v

"nnoremap <tab> %
"vnoremap <tab> %

set textwidth=79
set formatoptions=qrn1
set colorcolumn=80

inoremap <up> <nop>
inoremap <down> <nop>
"inoremap <left> <nop>
"inoremap <right> <nop>
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>

" move a line of text using ALT+[jk], indent with ALT+[hl]
nnoremap <A-k> :m-2<CR>==
nnoremap <A-j> :m+<CR>==
nnoremap <A-h> <<
nnoremap <A-l> >>
inoremap <A-j> <Esc>:m+<CR>==gi
inoremap <A-k> <Esc>:m-2<CR>==gi
inoremap <A-h> <Esc><<`]a
inoremap <A-l> <Esc>>>`]a
vnoremap <A-j> :m'>+<CR>gv=gv
vnoremap <A-k> :m-2<CR>gv=gv
vnoremap <A-h> <gv
vnoremap <A-l> >gv

nnoremap <leader>m :silent !open -a Marked.app '%:p'<cr>

au FocusLost * :wa " save when vim loses focus

au VimResized * :wincmd = "resize splits when window resized

inoremap jj <ESC>

noremap <leader>w <C-w>v<C-w>l

if has('gui_running')
    if has('mac')
        set guifont=Inconsolata\ for\ Powerline:h13
    elseif has('unix')
        set guifont=Inconsolata\ for\ Powerline\ 13
    endif
endif

" Specific settings for file types
autocmd FileType ruby set tabstop=2|set shiftwidth=2|set softtabstop=2
au FileType python let b:delimitMate_nesting_quotes = ['"']
au BufRead,BufNewFile Vagrantfile set filetype=ruby

function! MakeExecutable()
  silent !chmod a+x %
endfunction

" on save, make file executable if has shebang line with '/bin/'
au BufWritePost * if getline(1) =~ "^#!/bin/" | :call MakeExecutable() | endif
au BufWritePost * if getline(1) =~ "^#!/usr/bin/" | :call MakeExecutable() | endif

" reselect line after indent
vnoremap < <gv
vnoremap > >gv
